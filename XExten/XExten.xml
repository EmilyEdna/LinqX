<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XExten</name>
    </assembly>
    <members>
        <member name="T:XExten.CacheFactory.Caches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.CacheFactory.Caches.RedisConnectionString">
            <summary>
            Redis链接字符串
            </summary>
        </member>
        <member name="P:XExten.CacheFactory.Caches.MongoDBConnectionString">
            <summary>
            MongoDB链接字符串
            </summary>
        </member>
        <member name="P:XExten.CacheFactory.Caches.DbName">
            <summary>
            缓存类型为MongoDB是必填
            </summary>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheSet``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheSet``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheSet``1(``0)">
            <summary>
            添加MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheGet``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheGet``1(System.Object)">
            <summary>
            获取Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheGet``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCachesGet``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取MongoDB缓存列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheRemove(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheRemove(System.Object)">
            <summary>
            删除Redis缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheRemove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDbCacheUpdate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String)">
            <summary>
            更新MongoDB某个指
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <param name="Property"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheSetAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheSetAsync``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="MinutesOrSecond"></param>
            <param name="UseSecond"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheSetAsync``1(``0)">
            <summary>
            添加MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheGetAsync``1(System.Object)">
            <summary>
            获取Memory缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheGetAsync``1(System.Object)">
            <summary>
            获取Redis缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheGetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCachesGetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取MongoDB缓存列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RunTimeCacheRemoveAsync(System.Object)">
            <summary>
             删除Memory缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.RedisCacheRemoveAsync(System.Object)">
            <summary>
            删除Redis缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDBCacheRemoveAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除MongoDB缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
        </member>
        <member name="M:XExten.CacheFactory.Caches.MongoDbCacheUpdateAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String)">
            <summary>
            更新MongoDB某个指
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Exp"></param>
            <param name="Property"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.CacheFactory.MongoDbCache.MongoDbCaches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.CacheFactory.MongoDbCache.MongoDbCaches.MongoDBConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="P:XExten.CacheFactory.MongoDbCache.MongoDbCaches.MongoDBName">
            <summary>
            库名
            </summary>
        </member>
        <member name="P:XExten.CacheFactory.MongoDbCache.MongoDbCaches.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.Insert``1(``0)">
            <summary>
            插入单条记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.InsertMany``1(System.Collections.Generic.IList{``0})">
            <summary>
            批量插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.Search``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询单个记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.SearchMany``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            查询集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.Update``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.String)">
            <summary>
            更新单个
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="name"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.UpdateMany``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>
            批量更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            删除单条记录
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.MongoDbCache.MongoDbCaches.GetPage``1(System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.CacheFactory.RedisCache.RedisCaches">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.CacheFactory.RedisCache.RedisCaches.RedisConnectionString">
            <summary>
            链接字符串
            </summary>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.DeleteRedisDataBase">
            <summary>
            删除所有redis库
            </summary>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.DeleteRedisDataBaseAsync">
            <summary>
            异步删除所有redis库
            </summary>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            内部异常
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            集群更改
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            错误事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重连错误事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.Save``1(System.Func{StackExchange.Redis.IDatabase,``0})">
            <summary>
            保存通用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ConvertToJson``1(``0)">
            <summary>
            Redis转String
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ConvertToObj``1(StackExchange.Redis.RedisValue)">
            <summary>
            Redis值转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ConvertList``1(StackExchange.Redis.RedisValue[])">
            <summary>
            Redis值数组转list集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ConvertRedisKeys(System.Collections.Generic.List{System.String})">
            <summary>
            集合转key
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            单个保存
            </summary>
            <param name="key"></param>
            <param name="val">值</param>
            <param name="exp">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringGet(System.String)">
            <summary>
            获取单个
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringGet``1(System.String)">
            <summary>
            获取单个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            异步保存单个
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            异步保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringGetAsync(System.String)">
            <summary>
            异步获取单个
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.StringGetAsync``1(System.String)">
            <summary>
            异步获取单个对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyDelete(System.String)">
            <summary>
            删除单个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyRename(System.String,System.String)">
            <summary>
            重命名Key
            </summary>
            <param name="key">old key name</param>
            <param name="newKey">new key name</param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyDeleteAsync(System.String)">
            <summary>
            异步删除单个key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyDeleteAsync(System.Collections.Generic.List{System.String})">
            <summary>
            异步删除多个Key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyRenameAsync(System.String,System.String)">
            <summary>
             异步重命名Key
            </summary>
            <param name="key">old key name</param>
            <param name="newKey">new key name</param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.KeyExpireAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            异步设置Key的时间
            </summary>
            <param name="key"></param>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRemove``1(System.String,``0)">
            <summary>
            移除List内部指定的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRange``1(System.String)">
            <summary>
            获取指定Key的List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRightPush``1(System.String,``0)">
            <summary>
            插入（入队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRightPop``1(System.String)">
            <summary>
            取出（出队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.GetListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRemoveAsync``1(System.String,``0)">
            <summary>
            异步移除List内部指定的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRangeAsync``1(System.String)">
            <summary>
            异步获取指定Key的List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRightPushAsync``1(System.String,``0)">
            <summary>
            异步插入（入队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListRightPopAsync``1(System.String)">
            <summary>
            异步取出（出队）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            异步入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.ListLeftPopAsync``1(System.String)">
            <summary>
            异步出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.GetListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetAdd(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetLength(System.String)">
            <summary>
            获取长度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetContains(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetRemove(System.String,System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetAddAsync(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetLengthAsync(System.String)">
            <summary>
            获取长度
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetContainsAsync(System.String,System.String)">
            <summary>
            是否存在
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SetRemoveAsync(System.String,System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashExists(System.String,System.String)">
            <summary>
            是否被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashDelete(System.String,System.String)">
            <summary>
            从hash表中移除数据
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashRemove(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashGet``1(System.String,System.String)">
            <summary>
            从hash表中获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashExistsAsync(System.String,System.String)">
            <summary>
            异步是否被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            异步存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashDeleteAsync(System.String,System.String)">
            <summary>
            异步从hash表中移除数据
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashRemoveAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            异步移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashGetAsync``1(System.String,System.String)">
            <summary>
            从hash表中获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            无序添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetLength(System.String)">
            <summary>
             获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            异步无序添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <param name="score"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RedisCache.RedisCaches.SortedSetLengthAsync(System.String)">
            <summary>
             获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.CacheFactory.RunTimeCache.MemoryCaches">
             <summary>
            
             </summary>
        </member>
        <member name="M:XExten.CacheFactory.RunTimeCache.MemoryCaches.AddCache``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <param name="Value"></param>
            <param name="Time"></param>
            <param name="UseSecond"></param>
        </member>
        <member name="M:XExten.CacheFactory.RunTimeCache.MemoryCaches.GetCache``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.CacheFactory.RunTimeCache.MemoryCaches.RemoveCache(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="Key"></param>
        </member>
        <member name="T:XExten.Common.IgnoreMappedAttribute">
            <summary>
            忽略映射(Not Map)
            </summary>
        </member>
        <member name="T:XExten.Common.PageQuery">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="P:XExten.Common.PageQuery.PageIndex">
            <summary>
            页码
            </summary>
        </member>
        <member name="P:XExten.Common.PageQuery.PageSize">
            <summary>
            条数
            </summary>
        </member>
        <member name="P:XExten.Common.PageQuery.KeyWord">
            <summary>
            关键字
            </summary>
        </member>
        <member name="T:XExten.Common.PageResult`1">
            <summary>
            分页结果
            </summary>
        </member>
        <member name="P:XExten.Common.PageResult`1.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:XExten.Common.PageResult`1.CurrentPage">
            <summary>
            CurrentPage
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:XExten.Common.PageResult`1.TotalPage" -->
        <member name="P:XExten.Common.PageResult`1.Queryable">
            <summary>
             Result
            </summary>
        </member>
        <member name="T:XExten.Common.ResultProvider">
            <summary>
            序列化中间结果
            </summary>
        </member>
        <member name="P:XExten.Common.ResultProvider.ObjectProvider">
            <summary>
            对象结果
            </summary>
        </member>
        <member name="P:XExten.Common.ResultProvider.DynamicProvider">
            <summary>
            运行时结果
            </summary>
        </member>
        <member name="P:XExten.Common.ResultProvider.DictionaryObjectProvider">
            <summary>
            字典结果
            </summary>
        </member>
        <member name="P:XExten.Common.ResultProvider.DictionaryStringProvider">
            <summary>
            字典结果
            </summary>
        </member>
        <member name="M:XExten.Common.ResultProvider.SetValue(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            设值
            </summary>
            <param name="ObjKey"></param>
            <param name="DicKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Common.ResultProvider.SetValue(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            设值
            </summary>
            <param name="ObjKey"></param>
            <param name="DicKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Common.ResultProvider.SetValue(System.Object,System.Object)">
            <summary>
            设值
            </summary>
            <param name="ObjKey"></param>
            <param name="DynKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicClass.ToString">
            <summary>
            转字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicClassBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.String)">
            <summary>
             Create DynamicClass
            </summary>
            <param name="properties"></param>
            <param name="ClassName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="moduleName">The name of the assembly module.</param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateEx(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
             <summary>
            
             </summary>
             <param name="properties"></param>
             <param name="methods"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateDynamicClass(XExten.DynamicType.DynamicProperty[],XExten.DynamicType.DynamicMethod[])">
             <summary>
            
             </summary>
             <param name="properties"></param>
             <param name="methods"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateConstructor(System.Reflection.Emit.TypeBuilder)">
             <summary>
            
             </summary>
             <param name="typeBuilder"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateMethods(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicMethod[])">
             <summary>
            
             </summary>
             <param name="tb"></param>
             <param name="methods"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateProperties(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicProperty[])">
             <summary>
            
             </summary>
             <param name="tb"></param>
             <param name="properties"></param>
             <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
             <summary>
            
             </summary>
             <param name="tb"></param>
             <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateGetHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
             <summary>
            
             </summary>
             <param name="tb"></param>
             <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="T:XExten.Encryption.LzStringEncryption">
            <summary>
            implements LzstringJS
            </summary>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.CompressToBase64(System.String)">
            <summary>
            采用Base64编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.DecompressFromBase64(System.String)">
            <summary>
            解析Base64编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.CompressToUTF16(System.String)">
            <summary>
            采用UTF16编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.DecompressFromUTF16(System.String)">
            <summary>
            解析UTF16编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.CompressToEncodedURIComponent(System.String)">
            <summary>
            采用URI编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.DecompressFromEncodedURIComponent(System.String)">
            <summary>
            解析URI编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.Compress(System.String)">
            <summary>
            压缩
            </summary>
            <param name="uncompressed"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.LzStringEncryption.Decompress(System.String)">
            <summary>
            解析
            </summary>
            <param name="compressed"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Encryption.MD5Encryption">
            <summary>
            MD5
            </summary>
        </member>
        <member name="M:XExten.Encryption.MD5Encryption.MD5_32(System.String)">
            <summary>
            32位MD5
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.MD5Encryption.MD5_16(System.String)">
            <summary>
            16位MD5
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Encryption.RSAEncryption">
            <summary>
            RSA
            </summary>
        </member>
        <member name="M:XExten.Encryption.RSAEncryption.RSAEncrypt(System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.RSAEncryption.RSADecrypt(System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.RSAEncryption.CreateRsaFromPublicKey(System.String)">
            <summary>
            创建公钥RSA服务
            </summary>
            <param name="PublicKey"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.RSAEncryption.CreateRsaProviderFromPrivateKey(System.String)">
            <summary>
            创建私钥RSA服务
            </summary>
            <param name="PrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.Encryption.SHAEncryption">
            <summary>
            SHA
            </summary>
        </member>
        <member name="M:XExten.Encryption.SHAEncryption.SHA1Encrypt(System.String)">
            <summary>
            SHA1
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.SHAEncryption.SHA256Encrypt(System.String)">
            <summary>
            SHA256
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.SHAEncryption.SHA384Encrypt(System.String)">
            <summary>
            SHA384
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.Encryption.SHAEncryption.SHA512Encrypt(System.String)">
            <summary>
            SHA512
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.HttpKeyPairs">
            <summary>
            封装数据
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.HttpKeyPairs.KeyValuePairs``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.HttpMultiClient">
            <summary>
            负载请求
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.HttpMultiClient.HttpMulti">
            <summary>
            Instance
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.InitCookieContainer">
            <summary>
            初始化Cookie容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.Headers(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.Headers(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.Cookies(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.Cookies(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.Cookies(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path">请求地址</param>
            <param name="Type">请求类型</param>
            <param name="Weight">1~100区间</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
             <param name="Type">请求类型</param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpMultiClient.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param">实体模型</param>
            <param name="MapFied">映射字段</param>
             <param name="Type">请求类型</param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiImplement.Builder">
            <summary>
            构建器
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Builder.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Builder.RunBytes">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Builder.RunBytesAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Builder.RunString">
            <summary>
            执行 default UTF-8
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Builder.RunStringAsync">
            <summary>
            执行 default UTF-8
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiImplement.Cookies">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Cookies.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="MapFied"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiImplement.Headers">
            <summary>
            Header
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Headers.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="MapFied"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiImplement.Node">
            <summary>
            URL
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path">请求地址</param>
            <param name="Type">请求类型</param>
            <param name="Weight">1~100区间</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
             <param name="Type">请求类型</param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param">实体模型</param>
            <param name="MapFied">映射字段</param>
             <param name="Type">请求类型</param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiImplement.Node.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiInterface.IBuilder">
            <summary>
            构建
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IBuilder.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IBuilder.RunString">
            <summary>
            执行 default UTF-8
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IBuilder.RunStringAsync">
            <summary>
            执行 default UTF-8
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IBuilder.RunBytes">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IBuilder.RunBytesAsync">
            <summary>
            执行
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiInterface.ICookies">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param">实体模型</param>
            <param name="MapFied">映射字段</param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.ICookies.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiInterface.IHeaders">
            <summary>
            Header
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            AddUri
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param">实体模型</param>
            <param name="MapFied">映射字段</param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.IHeaders.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.MultiInterface.INode">
            <summary>
            
            </summary>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Build(System.Int32)">
            <summary>
            构建
            </summary>
            <param name="TimeOut">超时:秒</param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.AddNode(System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.AddNode(System.String,System.String,XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.AddNode(System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <param name="Path"></param>
            <param name="Param"></param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.AddNode``1(System.String,``0,System.Collections.Generic.IDictionary{System.String,System.String},XExten.HttpFactory.RequestType,System.Int32)">
            <summary>
            Add Path
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Path"></param>
            <param name="Param">实体模型</param>
            <param name="MapFied">映射字段</param>
            <param name="Type"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Header(System.String,System.String)">
            <summary>
            Add Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Header(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Add Header
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Cookie(System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Cookie(System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.MultiInterface.INode.Cookie(System.String,System.String,System.String,System.String)">
            <summary>
            Add Cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="path"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.HttpFactory.RequestType">
            <summary>
            RequestType
            </summary>
        </member>
        <member name="F:XExten.HttpFactory.RequestType.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:XExten.HttpFactory.RequestType.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:XExten.HttpFactory.RequestType.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:XExten.HttpFactory.RequestType.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="T:XExten.HttpFactory.WeightURL">
            <summary>
            负载路由
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.WeightURL.Request">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.WeightURL.Weight">
            <summary>
            负载比
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.WeightURL.URL">
            <summary>
            路由
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.WeightURL.Contents">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:XExten.HttpFactory.WeightURL.MediaTypeHeader">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="T:XExten.MessageQueue.QueueDictionary">
             <summary>
            
             </summary>
        </member>
        <member name="M:XExten.MessageQueue.QueueDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XExten.MessageQueue.QueueItem">
             <summary>
            
             </summary>
        </member>
        <member name="P:XExten.MessageQueue.QueueItem.Key">
            <summary>
            队列项唯一标识
            </summary>
        </member>
        <member name="P:XExten.MessageQueue.QueueItem.Action">
            <summary>
            队列项目命中触发时执行的委托
            </summary>
        </member>
        <member name="P:XExten.MessageQueue.QueueItem.AddTime">
            <summary>
            此实例对象的创建时间
            </summary>
        </member>
        <member name="P:XExten.MessageQueue.QueueItem.Description">
            <summary>
            项目说明（主要用于调试）
            </summary>
        </member>
        <member name="M:XExten.MessageQueue.QueueItem.#ctor(System.String,System.Action,System.String)">
            <summary>
            实例化
            </summary>
            <param name="key"></param>
            <param name="action"></param>
            <param name="description"></param>
        </member>
        <member name="T:XExten.MessageQueue.XQueue">
             <summary>
            
             </summary>
        </member>
        <member name="F:XExten.MessageQueue.XQueue.MessageQueueDictionary">
            <summary>
            队列数据集合
            </summary>
        </member>
        <member name="F:XExten.MessageQueue.XQueue.MessageQueueSyncLock">
            <summary>
            同步执行锁
            </summary>
        </member>
        <member name="F:XExten.MessageQueue.XQueue.FlushCacheLock">
            <summary>
            立即同步所有缓存执行锁（给OperateQueue()使用）
            </summary>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.GenerateKey(System.String,System.Type,System.String,System.String)">
            <summary>
            生成Key
            </summary>
            <param name="name">队列应用名称，如“ContainerBag”</param>
            <param name="senderType">操作对象类型</param>
            <param name="identityKey">对象唯一标识Key</param>
            <param name="actionName">操作名称，如“UpdateContainerBag”</param>
            <returns></returns>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.OperateQueue">
            <summary>
            操作队列
            </summary>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.GetCurrentKey">
            <summary>
            获取当前等待执行的Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.GetItem(System.String)">
            <summary>
            获取MessageQueueItem
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.Add(System.String,System.Action,System.String)">
            <summary>
            添加队列成员
            </summary>
            <param name="key"></param>
            <param name="action"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.Remove(System.String)">
            <summary>
            移除队列成员
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XExten.MessageQueue.XQueue.GetCount">
            <summary>
            获得当前队列数量
            </summary>
            <returns></returns>
        </member>
        <member name="T:XExten.XCore.LinqX">
            <summary>
            Linq Extension Class
            </summary>
        </member>
        <member name="M:XExten.XCore.LinqX.ToAutoMapper``1(System.Object)">
            <summary>
            使用AutoMapper将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity by AutoMapper)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToAutoMapperWithIgnore``1(System.Object,System.String)">
            <summary>
            使用AutoMapper将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity by AutoMapper)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="IgnoreNames"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDes``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
             (Returns an entity with a property value marked to describe the property field)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDic``1(``0)">
            <summary>
            将实体的属性名称和属性值遍历包含到字典中并返回字典
            (Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             循环字典(Traversing the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEach``1(System.Array,System.Action{``0})">
            <summary>
            循环数组(Traversing the array)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachs``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             循环集合(Traverse collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntities``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to entities)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntity``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToJson``1(``0)">
            <summary>
            序列化(SerializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapper``2(``0)">
            <summary>
            使用Express将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity by express)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMappers``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             将集合映射到另一个集合并返回该集合(Map a collection to another collection and return the collection)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToModel``1(System.String)">
            <summary>
            返序列化(DeserializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgByte``1(``0,System.Boolean)">
            <summary>
            使用MsgPack序列化(DeserializeObject For MessagePack)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="IsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgJson(System.Byte[])">
            <summary>
            使用MsgPack序列化为Json(DeserializeObject To Json For MessagePack)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgModel``1(System.Byte[],System.Boolean)">
            <summary>
            使用MsgPack反序列化(DeserializeObject For MessagePack)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="IsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToNames``1(``0)">
            <summary>
             返回实体中所有的字段名(Returns all Property names in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToOver``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            返回集合中字段的所有值(Returns all values of a field in a collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回分页数据(Return paging data)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSelectDes``1(``0)">
            <summary>
            返回指定的枚举描述值
            (Returns the specified enumeration description value)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSet``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             为选择的T的属性设置一个值(set a value for T's Property which choose)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTable``1(``0)">
            <summary>
            将实体转换为数据表并返回数据表(Convert the entity to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回数据表(return data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTables``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表(Convert the collection to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicode(System.String)">
            <summary>
            转换成Unicode(Return Unicode string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicode``1(``0)">
            <summary>
            替换实体中的数据并将其作为Unicode返回(Replace the data in the entity and return it as Unicode)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8(System.String)">
            <summary>
            转换成UTF8(Return UTF8 string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8``1(``0)">
            <summary>
             替换实体中的数据并将其作为UTF8返回(Replace the data in the entity and return it as UTF8)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToValues``1(``0)">
            <summary>
            返回实体中所有的字段值(Returns all Property Values in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToAutoMapperAsync``1(System.Object)">
            <summary>
            使用AutoMapper将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity by AutoMapper)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToAutoMapperWithIgnoreAsync``1(System.Object,System.String)">
            <summary>
            使用AutoMapper将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity by AutoMapper)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="IgnoreNames"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
             (Returns an entity with a property value marked to describe the property field)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicAsync``1(``0)">
            <summary>
            将实体的属性名称和属性值遍历包含到字典中并返回字典
            (Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             循环字典(Traversing the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachAsync``1(System.Array,System.Action{``0})">
            <summary>
            循环数组(Traversing the array)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             循环集合(Traverse collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntitiesAsync``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to entities)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntityAsync``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToJsonAsync``1(``0)">
            <summary>
            序列化(SerializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapAsync``2(``0)">
            <summary>
            将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapsAsync``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             将集合映射到另一个集合并返回该集合(Map a collection to another collection and return the collection)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToModelAsync``1(System.String)">
            <summary>
            返序列化(DeserializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgByteAsync``1(``0,System.Boolean)">
            <summary>
            使用MsgPack序列化(DeserializeObject For MessagePack)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="IsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgJsonAsync(System.Byte[])">
            <summary>
            使用MsgPack序列化为Json(DeserializeObject To Json For MessagePack)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMsgModelAsync``1(System.Byte[],System.Boolean)">
            <summary>
            使用MsgPack反序列化(DeserializeObject For MessagePack)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="IsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToNamesAsync``1(``0)">
            <summary>
             返回实体中所有的字段名(Returns all Property names in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToOverAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            返回集合中字段的所有值(Returns all values of a field in a collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToPageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回分页数据(Return paging data)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSelectDesAsync``1(``0)">
            <summary>
            返回指定的枚举描述值
            (Returns the specified enumeration description value)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSetAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             为选择的T的属性设置一个值(set a value for T's Property which choose)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTableAsync``1(``0)">
            <summary>
            将实体转换为数据表并返回数据表(Convert the entity to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTableAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回数据表(return data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTablesAsync``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表(Convert the collection to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicAsync(System.String)">
            <summary>
            转换成Unicode(Return Unicode string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicAsync``1(``0)">
            <summary>
            替换实体中的数据并将其作为Unicode返回(Replace the data in the entity and return it as Unicode)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8Async(System.String)">
            <summary>
            转换成UTF8(Return UTF8 string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8Async``1(``0)">
            <summary>
             替换实体中的数据并将其作为UTF8返回(Replace the data in the entity and return it as UTF8)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToValuesAsync``1(``0)">
            <summary>
            返回实体中所有的字段值(Returns all Property Values in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsContainsIn(System.String,System.String[])">
            <summary>
            是否在里面(Is it inside)
            </summary>
            <param name="thisValue"></param>
            <param name="inValues"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsEamil(System.Object)">
            <summary>
            是邮箱(Is Email)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsFax(System.Object)">
            <summary>
            是传真(Is Fax)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsIDcard(System.Object)">
            <summary>
            是身份证(Is IdCard)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsIn``1(``0,``0[])">
            <summary>
            是否在里面(Is it inside)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            值所的范围(Range of values)
            </summary>
            <param name="thisValue"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            时间值所的范围(Range of datetime values)
            </summary>
            <param name="thisValue"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInt(System.Object)">
            <summary>
            Is INT
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsMobile(System.Object)">
            <summary>
            是手机(Is Phone)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNoInt(System.Object)">
            <summary>
            Is Not INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Object)">
            <summary>
            是null或""(Is null or "")
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是null或""(Is null or "")
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             确定集合是否为空(Determine if the collection is empty)
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsTelephone(System.Object)">
            <summary>
            是座机(Is Tel Phone)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsValuable(System.Object)">
            <summary>
            有值?(has value)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsValuable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            有值?(has value)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsZero(System.Object)">
            <summary>
            是零(IsZero)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToLzStringDec(System.String)">
            <summary>
            LzString解密（LzString Base64 Decryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToLzStringEnc(System.String)">
            <summary>
            LzString加密（LzString Base64 Encryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMD5(System.String,System.Int32)">
            <summary>
            MD5加密（MD5 Encryption）
            </summary>
            <param name="Param"></param>
            <param name="type">位数：16 32</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToRSADec(System.String)">
            <summary>
            RSA解密（RSA Decryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToRSAEnc(System.String)">
            <summary>
            RSA加密（RSA Encryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSHA(System.String,System.Int32)">
            <summary>
            SHA加密（SHA Encryption）
            </summary>
            <param name="Param"></param>
            <param name="type">位数：1 256 384 512</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToLzStringAsyncDec(System.String)">
            <summary>
            LzString解密（LzString Base64 Decryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToLzStringAsyncEnc(System.String)">
            <summary>
            LzString加密（LzString Base64 Encryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMD5Async(System.String,System.Int32)">
            <summary>
            MD5加密（MD5 Encryption）
            </summary>
            <param name="Param"></param>
            <param name="type">位数：16 32</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToRSAAsyncDec(System.String)">
            <summary>
            RSA解密（RSA Decryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToRSAAsyncEnc(System.String)">
            <summary>
            RSA加密（RSA Encryption）
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSHAAsync(System.String,System.Int32)">
            <summary>
            SHA加密（SHA Encryption）
            </summary>
            <param name="Param"></param>
            <param name="type">位数：1 256 384 512</param>
            <returns></returns>
        </member>
        <member name="T:XExten.XExpres.QType">
             <summary>
            
             </summary>
        </member>
        <member name="F:XExten.XExpres.QType.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.NotLike">
            <summary>
            NotLike
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.Equals">
            <summary>
            Equals
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.NotEquals">
            <summary>
            NotEquals
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.GreaterThan">
            <summary>
            GreaterThan
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.GreaterThanOrEqual">
            <summary>
            GreaterThanOrEqual
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.LessThan">
            <summary>
            LessThan
            </summary>
        </member>
        <member name="F:XExten.XExpres.QType.LessThanOrEqual">
            <summary>
            LessThanOrEqual
            </summary>
        </member>
        <member name="T:XExten.XExpres.NewExpressionVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="T:XExten.XExpres.XExp">
            <summary>
            Expression Extension Class
            </summary>
        </member>
        <member name="M:XExten.XExpres.XExp.GetAttributeType``2(System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
             返回一个属性类(Return AttributeType)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值(Set Properties Value)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式(Return a new expression)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String,System.Object,XExten.XExpres.QType)">
            <summary>
             返回一个bool表达式(return a bool expression)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.CombineClass``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            将两个类合并为一个类(Combine two classes into one class)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.CombineClassWithValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},System.Collections.Generic.List{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            将两个类合并为一个类并设值(Combine two classes into one class with value)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <param name="dynamics"></param>
        </member>
        <member name="M:XExten.XExpres.XExp.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne AND ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            合并表达式 ExprOne or ExprTwo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ExprOne"></param>
            <param name="ExprTwo"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.XPlus.XPlusEx">
            <summary>
            Common Extension Class
            </summary>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCreateQRCode(System.String,System.Int32)">
            <summary>
            生成二维码
            </summary>
            <param name="Path">网址</param>
            <param name="Pixel">像素</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCreateQRCode(System.String,System.Int32,System.Int32)">
            <summary>
            生成二维码
            </summary>
            <param name="Path">网址</param>
            <param name="Pixel">像素</param>
            <param name="ImgType">1：PNG，2：JPEG，3：GIF，不在此区间默认PNG</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XMD5(System.String,System.Int32)">
            <summary>
            MD5加密
            </summary>
            <param name="Input"></param>
            <param name="Type">位数：32 16</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XProtobufDeSerialize``1(System.Byte[])">
            <summary>
            使用Protobuf反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Bytes"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XProtobufSerialize``1(``0)">
            <summary>
            使用Protobuf序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Poco"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XReadXml(System.String,System.String,System.String)">
            <summary>
            读取XML内容
            </summary>
            <param name="NodeItem">根节点</param>
            <param name="NodeKey">根节点下Key节点</param>
            <param name="NodeValue">根节点下Value节点</param>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XRSADecryp(System.String)">
            <summary>
            RSA解密
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XRSAEncryp(System.String)">
            <summary>
            RSA加密
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XSHA(System.String,System.Int32)">
            <summary>
            SHA加密
            </summary>
            <param name="Input"></param>
            <param name="Type">位数：1 256 384 512</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XBarHtml(System.String,System.Int32,System.Int32)">
            <summary>
             返回条形码(Return barcode)
            </summary>
            <param name="Param"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCompressToBase64(System.String)">
            <summary>
            采用Base64编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCompressToEncodedURIComponent(System.String)">
            <summary>
            采用URI编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCompressToUTF16(System.String)">
            <summary>
            采用UTF16编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XConvertCHN(System.Decimal)">
            <summary>
            将小写的金钱转换成大写的金钱(Convert money into Chinese characters)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XDecompressFromBase64(System.String)">
            <summary>
            解析Base64编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XDecompressFromEncodedURIComponent(System.String)">
            <summary>
            解析URI编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XDecompressFromUTF16(System.String)">
            <summary>
            解析UTF16编码(LzString)
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两点GPS坐标的距离（单位：米）
            Calculate the distance between two GPS coordinates (unit: meter)
            </summary>
            <param name="LatStar">第一点的纬度坐标</param>
            <param name="LngStar">第一点的经度坐标</param>
            <param name="LatEnd">第二点的纬度坐标</param>
            <param name="LngEnd">第二点的经度坐标</param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XFilterStr(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            过滤字符(Filter characters)
            </summary>
            <param name="Param"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XmlDeserialize``1(System.String)">
            <summary>
            反系列化XML(XmlDeserialize)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Xml"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XmlSerializer``1(``0)">
            <summary>
            将对象序列化为XML(XmlSerializer)
            说明：此方法序列化复杂类，如果没有声明XmlInclude等特性，可能会引发“使用 XmlInclude 或 SoapInclude 特性静态指定非已知的类型。”的错误。
            (Description: This method serializes complex classes. If you do not declare features such as XmlInclude, you may get an error "Use the XmlInclude or SoapInclude feature to statically specify a non-known type.")
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XTel">
            <summary>
            取一个随机手机号(Return a random phone number)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XVerifyCode">
            <summary>
            创建一个验证吗(Create a verification code)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XIsChineseStr(System.String)">
            <summary>
            检查字符串是否有中文字符
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XTry(System.Action,System.Action{System.Exception},System.Action)">
            <summary>
            异常处理
            </summary>
            <param name="Executer"></param>
            <param name="Exception"></param>
            <param name="Finally"></param>
        </member>
    </members>
</doc>
