<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XExten</name>
    </assembly>
    <members>
        <member name="M:XExten.DynamicType.DynamicClassBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="moduleName">The name of the assembly module.</param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateEx(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateDynamicClass(XExten.DynamicType.DynamicProperty[],XExten.DynamicType.DynamicMethod[])">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            
            </summary>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateMethods(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicMethod[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="methods"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateProperties(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicProperty[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateGetHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.KeyValuePairs``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Making form data to KeyValuePairs
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpPostAsync(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Http by post default UTF8
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="timeout"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpPostBytesAsync(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Http by post default Bytes
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="timeout"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpGetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Http by get default UTF8
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpGetBytesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Http by get default Bytes
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUnic(System.String)">
            <summary>
            Return Unicode string
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUTF8(System.String)">
            <summary>
             Return UTF8 string
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUnic``1(``0)">
            <summary>
            Replace the data in the entity and return it as Unicode
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUTF8``1(``0)">
            <summary>
             Replace the data in the entity and return it as UTF8
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByMap``2(``0)">
            <summary>
            Map an entity to another entity and return the entity
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEach``1(System.Array,System.Action{``0})">
            <summary>
            Traversing the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEachs``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             Traverse collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByNames``1(``0)">
            <summary>
             Returns all Property names in an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByValues``1(``0)">
            <summary>
             Returns all Property Values in an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTables``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert the collection to a data table and return the data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTable``1(``0)">
            <summary>
            Convert the entity to a data table and return the data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByMaps``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Map a collection to another collection and return the collection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDic``1(``0)">
            <summary>
            Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Determine if the collection is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDes``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             Returns an entity with a property value marked to describe the property field
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByLong``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             Convert a field type to a long integer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.BySet``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             set a value for T's Property which choose
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             Return paging data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             return  data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.BySend``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Transform your shit into some other shit.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             Traversing the dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByOver``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns all values of a field in a collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEntity``1(System.Data.DataTable)">
            <summary>
            Convert a data table to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEntities``1(System.Data.DataTable)">
            <summary>
            Convert a data table to entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUnicAsync(System.String)">
            <summary>
            Return Unicode string
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUTF8Async(System.String)">
            <summary>
             Return UTF8 string
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUnicAsync``1(``0)">
            <summary>
            Replace the data in the entity and return it as Unicode
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByUTF8Async``1(``0)">
            <summary>
             Replace the data in the entity and return it as UTF8
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByMapAsync``2(``0)">
            <summary>
            Map an entity to another entity and return the entity
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEachAsync``1(System.Array,System.Action{``0})">
            <summary>
            Traversing the array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEachsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             Traverse collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByNamesAsync``1(``0)">
            <summary>
             Returns all Property names in an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByValuesAsync``1(``0)">
            <summary>
             Returns all Property Values in an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTablesAsync``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert the collection to a data table and return the data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTableAsync``1(``0)">
            <summary>
            Convert the entity to a data table and return the data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByMapsAsync``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Map a collection to another collection and return the collection
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDicAsync``1(``0)">
            <summary>
            Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmptyAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             Determine if the collection is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             Returns an entity with a property value marked to describe the property field
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByLongAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             Convert a field type to a long integer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.BySetAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             set a value for T's Property which choose
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByPageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             Return paging data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByTableAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             return  data table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.BySendAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Transform your shit into some other shit.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <param name="MapForm"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByDicEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             Traversing the dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ByOverAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns all values of a field in a collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEntityAsync``1(System.Data.DataTable)">
            <summary>
            Convert a data table to an entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ByEntitiesAsync``1(System.Data.DataTable)">
            <summary>
            Convert a data table to entities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.GetAttributeType``2(System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
             Return AttributeType
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            Set Properties Value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String[])">
            <summary>
             Return a new expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String,System.Object,XExten.XExpres.QType)">
            <summary>
             return a bool expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            Combine two classes into one class
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XTel">
            <summary>
            Return a random phone number
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XVerifyCode">
            <summary>
            Create a verification code
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XBarHtml(System.String,System.Int32,System.Int32)">
            <summary>
             Return barcode
            </summary>
            <param name="Param"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XCheckMatch(System.String,System.String)">
            <summary>
            return bool and check string is match
            </summary>
            <param name="Param"></param>
            <param name="Template"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XConvertCHN(System.Decimal)">
            <summary>
            Convert money into Chinese characters
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
    </members>
</doc>
