<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XExten</name>
    </assembly>
    <members>
        <member name="T:XExten.CacheFactory.Caches">
            <summary>
            
            </summary>
        </member>
        <member name="M:XExten.DynamicType.DynamicClass.ToString">
            <summary>
            转字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicClassBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.String)">
            <summary>
             Create DynamicClass
            </summary>
            <param name="properties"></param>
            <param name="ClassName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="moduleName">The name of the assembly module.</param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateEx(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GetDynamicClass(System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateDynamicClass(XExten.DynamicType.DynamicProperty[],XExten.DynamicType.DynamicMethod[])">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.CreateConstructor(System.Reflection.Emit.TypeBuilder)">
            <summary>
            
            </summary>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateMethods(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicMethod[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="methods"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateProperties(System.Reflection.Emit.TypeBuilder,XExten.DynamicType.DynamicProperty[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateEquals(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.DynamicTypeBuilder.GenerateGetHashCode(System.Reflection.Emit.TypeBuilder,System.Reflection.FieldInfo[])">
            <summary>
            
            </summary>
            <param name="tb"></param>
            <param name="fields"></param>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicProperty},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.DynamicType.IDynamicTypeBuilder.Create(System.String,System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicPropertyValue},System.Collections.Generic.IEnumerable{XExten.DynamicType.DynamicMethod})">
            <summary>
            Create a new instance of the dynamic type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="properties">The collection of properties to create in the type.</param>
            <param name="methods">The collection of methods to create in the type.</param>
            <returns>The new instance of the type.</returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.KeyValuePairs``1(``0,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建一个key-value格式的表单数据(Making form data to KeyValuePairs)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
            <param name="Map"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpPostAsync(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Http by post default UTF8
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="timeout"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpPostBytesAsync(System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Http by post default Bytes
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="timeout"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpGetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Http by get default UTF8
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.HttpFactory.HttpRequestClient.HttpGetBytesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Http by get default Bytes
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.XCore.LinqX">
            <summary>
            Linq Extension Class
            </summary>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicode(System.String)">
            <summary>
            转换成Unicode(Return Unicode string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8(System.String)">
            <summary>
            转换成UTF8(Return UTF8 string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicode``1(``0)">
            <summary>
            替换实体中的数据并将其作为Unicode返回(Replace the data in the entity and return it as Unicode)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8``1(``0)">
            <summary>
             替换实体中的数据并将其作为UTF8返回(Replace the data in the entity and return it as UTF8)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapper``2(``0)">
            <summary>
            将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEach``1(System.Array,System.Action{``0})">
            <summary>
            循环数组(Traversing the array)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachs``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             循环集合(Traverse collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToNames``1(``0)">
            <summary>
             返回实体中所有的字段名(Returns all Property names in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToValues``1(``0)">
            <summary>
            返回实体中所有的字段值(Returns all Property Values in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTables``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表(Convert the collection to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTable``1(``0)">
            <summary>
            将实体转换为数据表并返回数据表(Convert the entity to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMappers``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             将集合映射到另一个集合并返回该集合(Map a collection to another collection and return the collection)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDic``1(``0)">
            <summary>
            将实体的属性名称和属性值遍历包含到字典中并返回字典
            (Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDes``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
             (Returns an entity with a property value marked to describe the property field)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSet``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             为选择的T的属性设置一个值(set a value for T's Property which choose)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回分页数据(Return paging data)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回数据表(return data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             循环字典(Traversing the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToOver``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            返回集合中字段的所有值(Returns all values of a field in a collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntity``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntities``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to entities)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToJson``1(``0)">
            <summary>
            序列化(SerializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToModel``1(System.String)">
            <summary>
            返序列化(DeserializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicAsync(System.String)">
            <summary>
            转换成Unicode(Return Unicode string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8Async(System.String)">
            <summary>
            转换成UTF8(Return UTF8 string)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUnicAsync``1(``0)">
            <summary>
            替换实体中的数据并将其作为Unicode返回(Replace the data in the entity and return it as Unicode)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToUTF8Async``1(``0)">
            <summary>
             替换实体中的数据并将其作为UTF8返回(Replace the data in the entity and return it as UTF8)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapAsync``2(``0)">
            <summary>
            将实体映射到另一个实体并返回该实体(Map an entity to another entity and return the entity)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachAsync``1(System.Array,System.Action{``0})">
            <summary>
            循环数组(Traversing the array)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEachsAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             循环集合(Traverse collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToNamesAsync``1(``0)">
            <summary>
             返回实体中所有的字段名(Returns all Property names in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToValuesAsync``1(``0)">
            <summary>
            返回实体中所有的字段值(Returns all Property Values in an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTablesAsync``1(System.Collections.Generic.IList{``0})">
            <summary>
            将集合转换为数据表并返回数据表(Convert the collection to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTableAsync``1(``0)">
            <summary>
            将实体转换为数据表并返回数据表(Convert the entity to a data table and return the data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToMapsAsync``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             将集合映射到另一个集合并返回该集合(Map a collection to another collection and return the collection)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicAsync``1(``0)">
            <summary>
            将实体的属性名称和属性值遍历包含到字典中并返回字典
            (Wraps an entity's property name and property value traversal into the dictionary and returns the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDesAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
             返回具有标记为描述属性字段的属性值的实体
             (Returns an entity with a property value marked to describe the property field)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToSetAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
             为选择的T的属性设置一个值(set a value for T's Property which choose)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <param name="Expres"></param>
            <param name="Value"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToPageAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回分页数据(Return paging data)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToTableAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
             返回数据表(return data table)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="PageIndex"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToDicEachAsync``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
             循环字典(Traversing the dictionary)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Param"></param>
            <param name="Selector"></param>
        </member>
        <member name="M:XExten.XCore.LinqX.ToOverAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            返回集合中字段的所有值(Returns all values of a field in a collection)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <param name="Expres"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntityAsync``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to an entity)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToEntitiesAsync``1(System.Data.DataTable)">
            <summary>
            将数据表转换为实体(Convert a data table to entities)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToJsonAsync``1(``0)">
            <summary>
            序列化(SerializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.ToModelAsync``1(System.String)">
            <summary>
            返序列化(DeserializeObject)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            值所的范围(Range of values)
            </summary>
            <param name="thisValue"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            时间值所的范围(Range of datetime values)
            </summary>
            <param name="thisValue"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsIn``1(``0,``0[])">
            <summary>
            是否在里面(Is it inside)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisValue"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsContainsIn(System.String,System.String[])">
            <summary>
            是否在里面(Is it inside)
            </summary>
            <param name="thisValue"></param>
            <param name="inValues"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Object)">
            <summary>
            是null或""(Is null or "")
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            是null或""(Is null or "")
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNullOrEmpty(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             确定集合是否为空(Determine if the collection is empty)
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsValuable(System.Object)">
            <summary>
            有值?(has value)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsValuable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            有值?(has value)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsZero(System.Object)">
            <summary>
            是零(IsZero)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsInt(System.Object)">
            <summary>
            Is INT
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsNoInt(System.Object)">
            <summary>
            Is Not INT?
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsEamil(System.Object)">
            <summary>
            是邮箱(Is Email)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsMobile(System.Object)">
            <summary>
            是手机(Is Phone)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsTelephone(System.Object)">
            <summary>
            是座机(Is Tel Phone)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsIDcard(System.Object)">
            <summary>
            是身份证(Is IdCard)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XCore.LinqX.IsFax(System.Object)">
            <summary>
            是传真(Is Fax)
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="T:XExten.XCore.Page`1">
            <summary>
            paging
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XExten.XCore.Page`1.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="P:XExten.XCore.Page`1.TotalPage">
            <summary>
            TotalPage
            </summary>
        </member>
        <member name="P:XExten.XCore.Page`1.CurrentPage">
            <summary>
            CurrentPage
            </summary>
        </member>
        <member name="P:XExten.XCore.Page`1.Queryable">
            <summary>
             Result
            </summary>
        </member>
        <member name="T:XExten.XCore.IgnoreMappedAttribute">
            <summary>
            忽略映射(Not Map)
            </summary>
        </member>
        <member name="T:XExten.XExpres.XExp">
            <summary>
            Expression Extension Class
            </summary>
        </member>
        <member name="M:XExten.XExpres.XExp.GetAttributeType``2(System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
             返回一个属性类(Return AttributeType)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.SetProptertiesValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0)">
            <summary>
            设置属性值(Set Properties Value)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JsonValue"></param>
            <param name="Param"></param>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String[])">
            <summary>
             返回一个new表达式(Return a new expression)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.GetExpression``1(System.String,System.Object,XExten.XExpres.QType)">
            <summary>
             返回一个bool表达式(return a bool expression)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Property"></param>
            <param name="Data"></param>
            <param name="QueryType"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.CombineClass``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}})">
            <summary>
            将两个类合并为一个类(Combine two classes into one class)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XExpres.XExp.CombineClassWithValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1,System.Object}},System.Collections.Generic.List{XExten.DynamicType.DynamicPropertyValue})">
            <summary>
            将两个类合并为一个类并设值(Combine two classes into one class with value)
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="Express"></param>
            <param name="dynamics"></param>
        </member>
        <member name="T:XExten.XPlus.XPlusEx">
            <summary>
            Common Extension Class
            </summary>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XTel">
            <summary>
            取一个随机手机号(Return a random phone number)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XVerifyCode">
            <summary>
            创建一个验证吗(Create a verification code)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XBarHtml(System.String,System.Int32,System.Int32)">
            <summary>
             返回条形码(Return barcode)
            </summary>
            <param name="Param"></param>
            <param name="Width"></param>
            <param name="Height"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.XConvertCHN(System.Decimal)">
            <summary>
            将小写的金钱转换成大写的金钱(Convert money into Chinese characters)
            </summary>
            <param name="Param"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.AddCache``1(System.String,``0,System.Int32)">
            <summary>
            添加缓存
            </summary>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.GetCache``1(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XExten.XPlus.XPlusEx.RemoveCache(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="Key"></param>
        </member>
    </members>
</doc>
